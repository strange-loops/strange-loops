{"version":3,"sources":["App.jsx","serviceWorker.ts","index.js","penrose.svg"],"names":["CenteredText","styled","div","Header","AppLogo","img","AppLink","a","App","src","penrose","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"szBAYA,IAAMA,EAAeC,IAAOC,IAAV,KAIZC,EAASF,IAAOC,IAAV,KAWNE,EAAUH,IAAOI,IAAV,KAIPC,EAAUL,IAAOM,EAAV,KAsBEC,MAlBf,WACI,OACI,gBAACR,EAAD,KACI,gBAACG,EAAD,KACI,gBAACC,EAAD,CAASK,IAAKC,IAASC,IAAI,qBAC3B,sFACA,gBAACL,EAAD,CACIM,KAAK,iDACLC,OAAO,SACPC,IAAI,uBAHR,qBC7BIC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuGzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,iB,kBE/GzBC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.6ebfa30a.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport penrose from './penrose.svg';\n\n/* \nThis file should really end in .tsx and use typescript but \nI still need to figure out how to use it!\n* https://www.styled-components.com/docs/api#typescript\n* https://reactjs.org/docs/static-type-checking.html#typescript\n* https://www.typescriptlang.org/docs/handbook/jsx.html\n*/\n\nconst CenteredText = styled.div`\n    text-align: center;\n`;\n\nconst Header = styled.div`\n    background-color: #282c34;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n\nconst AppLogo = styled.img`\n    height: 40vmin;\n`;\n\nconst AppLink = styled.a`\n    color: #09d3ac;\n`;\n\nfunction App() {\n    return (\n        <CenteredText>\n            <Header>\n                <AppLogo src={penrose} alt=\"penrose triangle\" />\n                <p>This is the starting place for the Strange Loops project!</p>\n                <AppLink\n                    href=\"https://github.com/strange-loops/strange-loops\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    See the README\n                </AppLink>\n            </Header>\n        </CenteredText>\n    );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log('New content is available; please refresh.');\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log('Content is cached for offline use.');\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString());\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ',\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/penrose.b7a8e114.svg\";"],"sourceRoot":""}